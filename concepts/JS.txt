- fetch
Built-in api to make HTTP request, returns a Promise.
It can be used along with then()/catch() o async/await

const response = await fetch("https://jsonplaceholder.typicode.com/users");
const resp = await response.json();

response.json() reads the response body (ReadableStream) and returns a Promise that resolves to a JavaScript object parsed from JSON.

A ReadableStream is a built-in JavaScript interface that represents a stream of data you can read chunk by chunk, asynchronously.

- Promesa
Is an object that represents the eventual result of an asynchronous operation.

Pending — not finished yet
Fulfilled — completed successfully
Rejected — failed with an error

- Promise.all
It's used for execute several Promises on parallel and wait that all of them solve or one failed.

const fetchUser = () => Promise.resolve('User');
const fetchPosts = () => Promise.resolve(['Post1', 'Post2']);

Promise.all([fetchUser(), fetchPosts()])
  .then(([user, posts]) => {
    console.log(user);  // 'User'
    console.log(posts); // ['Post1', 'Post2']
  })
  .catch((err) => {
    console.error('One of the promises failed', err);
  });